1.linux的账号与群组
  登入linux获取UID或GID
    寻找/etc/passwd里面是否有这个账号；没有就跳出，有的话将对应UID（User ID）与GID（Group ID）读出来；
    核对密码表，linux进入/etc/shadow找出对应的UID；
    shell控管阶段
  /etc/passwd，[权限-rw-r--r--]
    root:x:0:0:root:/root:/bin/bash
    bin:x:1:1:bin:/bin:/sbin/nologin
    daemon"x:2:2:daemon:/sbin:/sbin/nologin
    adm:x:3:4:adm:/var/adm:/sbin/nologin
    ...
      【输出以[:]隔开，详解】
      <1>账号名称，对应UID用；例如root就是预设的系统管理员账号名称；
      <2>密码x，现版本linux已将密码移动至shadow这个加密文件中；
      <3>UID，使用者识别码
        0，代表账号为系统管理员；如果想要让另一个账号变为系统管理员，只需将UID改为0即可（慎用）；
           UID除0以外，其他UID没有什么不一样（重点）；
        1~499，系统保留账号
          1~99，保留给系统预设账号
          100~499，保留给一些服务来使用
        500~65535，给一般使用者用
      <4>GID，与/etc/group有关；
      <5>User信息说明栏；
      <6>User的家目录；登陆之后即会进入该指定的目录，可支持修改；
      <7>shell，指该User账号使用哪个shell进行指令下达，也可支持修改；当shell为/sbin/nologin，表示该User禁止登录；
  /etc/shadow，[权限----------]
    root:$1$i9Ejldjfjio389u9sjl$jljsoi45QE/:12959:0:99999:7::: 
    bin:*:12959:0:99999:7::: 
    daemon:*:12959:0:99999:7::: 
    adm:*:12959:0:99999:7:::
    ...
      【输出以[:]隔开，详解】
      <1>账号名称，与/etc/passwd同理；
      <2>密码，经过编码的密码；如果显示[*/!]，表示这个账号不允许登录，如果想禁止某账号登录，只需要在/etc/shadow中，将密码改为*/!即可；
      <3>最近改动密码的时间；Linux的时间以1970年1月1日为1，那么2005年1月1日就是12784；
      <4>密码不更被改动的天数；
      <5>密码有效的天数，达到当前天数需要重新设置密码；
      <6>密码有效期即将失效的警告期限；
      <7>密码过期宽恕限定时间；当密码失效后，还可以继续使用该密码在n天内继续登录的意思；
      <8>账号失效日期；
      <9>保留；
  【忘记root密码】
    通过单用户模式进入linux系统之后，进入/etc/shadow这个目录，删掉root密码这一栏；
    然后登录linux就不需要密码了；
  /etc/group，[权限-rw-r--r--]
    root:x:0:root 
    bin:x:1:root,bin,daemon 
    daemon:x:2:root,bin,daemon 
    sys:x:3:root,bin,adm
    ...
      <1>群组名称；
      <2>群组密码，同样密码也是记录在/etc/gshadow当中；
      <3>GID,群组ID；
      <4>支持的账号名称；
  /etc/gshadow，[权限----------]
    root:::root 
    bin:::root,bin,daemon 
    daemon:::root,bin,daemon 
    sys:::root,bin,adm
    ...
      <1>群组名称；
      <2>密码栏；同样，开头为！表示无法登入；
      <3>群组管理员的账号；
      <4>该群组的所属账号；
      
2.账号的管理（新增、修改、删除）
  新增User：useradd 
    -u：后面接的是UID，是一组数字。直接指定一个特定的UID给这个账号；
    -g：后面接initial_group，该GID会放置到/etc/passwd的第四个字段内；
    -G：后面接可支持的Other_group，该参数会修改/etc/group内的相关资料；
    -M：强制！不要建立User家目录；
    -m：强制！建立User家目录；
    -c：/etc/passwd第五个字段的内容；
    -d：指定某个目录成为家目录，而不要使用默认值；
    -r：建立一个系统账号，这个账号的UID会有限制（/etc/login.defs）；
    -s：后面接一个shell，预设是/bin/bash；
    对账号进行管理的过程中，会改动的地方有：
      /etc/passwd
      /etc/shadow
      /etc/group
      /etc/gshadow
      /home/username
  修改User：usermod【root系统管理员指令】
    # usermod [-cdegGlsuLU] username
      -c ：后面接账号的说明，即 /etc/passwd 第五栏的说明栏，可以加入一些账号的说明。 
      -d ：后面接账号的家目录，即修改 /etc/passwd 的第六栏； 
      -e ：后面接日期，格式是 YYYY-MM-DD 也就是在 /etc/shadow 内的第八个字段数据啦！ 
      -g ：后面接 group name，修改 /etc/passwd 的第四个字段，亦即是 GID 的字段！ 
      -G ：后面接 group name，修改这个使用者能够支持的群组，修改的是 /etc/group 啰～ 
      -l ：后面接账号名称。亦即是修改账号名称， /etc/passwd 的第一栏！ 
      -s ：后面接 Shell 的实际档案，例如 /bin/bash 或 /bin/csh 等等。 
      -u ：后面接 UID 数字啦！即 /etc/passwd 第三栏的资料； 
      -L ：暂时将使用者的密码冻结，让他无法登入。其实仅改 /etc/shadow 的密码栏。 
      -U ：将 /etc/shadow 密码栏的 ! 拿掉，解冻啦！
  删除User：userdel
    # userdel [-r] username
    -r：连同使用者的家目录一并删除
    【userdel是删除该用户在主机上的任何数据；
    如果用户已经使用过一段时间，先以find / -user username查出整个系统的相关文件，再加以删除吧】
      
3.passwd
  # passwd [-kdluefxnwiS] username
  具体参数含义 passwd --help查看
  【重点：passwd更改密码有用户之分，即root用户与普通用户之分】

4.账号的切换su、sudo
  # su [-lcm] username
  -：执行su -时，表示该user要变换身份为root，且切换后使用root的环境设定参数
  -l：使用变换身份后的所有相关环境设定
  -m：-m与-p一样；表示使用当前环境设定，不使用变换身份后的环境设定
  -c：后面可接指令
  # sudo 切换用户与/etc/sudoers文件有关
    可使用visudo查看配置
    
5.【习题】
  *通过系统管理员对某一个账号暂时暂停使用，过一段时间后正常启用，如何设定？
    将/etc/passwd的shell字段（第七个字段）写成/sbin/nologin，即可让该账号暂时无法登录；
    将/etc/shadow内的密码字段，增加一个*号在最前面，这样该账号无法登录；（该方法在登陆时不会报错，会一直提示密码错误）
    将/etc/shadow的第八个字段关于账号取消日期，设定小于当前日期，那么它将无法登录；
  *使用useradd新增账号的时候，UID、GID以及相关密码控制，在哪个文件里设定的？
    /etc/login.defs
    /etc/default/useradd
  *pwconv这个指令有什么功能？
    pwconv可让passwd里面的账号，设定一份密码到/etc/shadow当中；（同步功能）
  *如何设定，让使用useradd时，预设的家目录就是/account？
    vim /etc/default/useradd
    将HOME=/home 改为HOME=/account
  *让账号Lzy加入test1、test2俩群组，如何操作？
    usermod -G test1 test2 Lzy

7.程序与可执行文件
  工作管理（job control）：指的是在同一个终端下面的工作界面管理
    【进行工作管理的行为中，其实每个工作都是目前bash的子程序，即彼此之间是有关联性的；
      无法以job control的方式，在tty1的环境去管理tty2的bash；
      总之，要进行bash的job control必须有两个限制：
        程序必须来自是shell的children process；
        程序不能等待terminal/shell的输入（input）；
    】
    *&：将指令丢到背景执行
      实例：tar -zpvf /tmp/etc.tar.gz /etc &
      [1] 24874    会生成[job number] PID
      终端可继续作业，不受tar命令影响，该指令的执行转至background；
      |注意：在background中执行指令，如果有stdout及stderr时，数据依旧会打印输出到屏幕；
       可用数据重定向传至某个文件，即可无数据打印输出；
    *Ctrl-z：将当前工作放到background中暂停
      stdout:示例
      [1]+  Stopped           vim ~/.bashrc
      [1]表示这是第一个任务
      +表示最近一个被丢到后台的任务，且是后台默认会被使用的那个任务（只有默认任务，即带＋号的任务，fg时，才会被拿到前台）
      Stopped表示当前此任务的状态（Ctrl-z的任务基本都是暂停的）
    *jobs
      查看当前的后台任务状态
      # jobs [-lrs]
      -l：除了列出job number与命令串之外，还会列出PID的号码；
      -r：仅列出后台正在run的进程；
      -s：仅列出后台中暂停（stop）的进程；      
    *fg：将后台任务拿到前台处理
      # fg %jobnumber
    *bg：让任务在后台下的状态变成运行中      
    *kill：管理后台当中的任务
      # kill -signal %jobnumber
      signal：代表给予后面任务什么样的指示，详情man 7 signal
        -1：重新读取一次参数的配置文件（类似于reload）
        -2：代表由键盘输入[Ctrl-c]同样的内容
        -9：立即强制删除一个任务
        -15：以正常的进程方式终止一个任务，与-9不同
  脱机管理问题
    任务管理的后台与终端有关
    *nohup实现终端脱机或注销后，任务继续执行
      nohup [命令与参数]         任务在终端前台
      nohup [命令与参数] &       任务在终端后台
  进程管理   
    *ps：查看进程
      # ps aux        查看系统所有进程
      # ps -lA        查看系统所有进程
      # ps axjf       连同部分进程树状态
      【主要使用两个：
        查看自己bash进程的       # ps -l
        查看所有系统运行的进程   # ps aux
       】
    *top：动态查看进程的变化
      【相较于ps选取一个时间点的进程状态，top则可以持续监测进程运行状态】
      在top执行过程中可以使用的按键命令
        ?：显示在top中可以输入的案件命令
        P：以CPU的使用排序显示
        M：以Memory的使用排序显示
        N：以PID来排序
        q：退出top
    *pstree：查看程序之间的相关性
      # pstree [-Aup]
        -A：各程序树之间的连接以ASCII字符来连接
        -u：并同时列出每个process的所属user名称
        -p：并同时列出每个process的PID
    *kill与killall
      kill：后面必须加上PID（或%jobnumber），所以kill经常搭配ps，pstree等指令使用；
      killall：将系统当中所有以某个指令名称启动的程序全部删除；
      
8.



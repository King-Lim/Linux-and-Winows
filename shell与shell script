1.关于vim的报错
# vim /tmp/vitest/man_db.conf
  E325：ATTENTION
  ......
  [O]pen Read-Only,[E]dit anyway,[R]cover,[D]elete it,[Q]uit,[A]bort
    【[O]pen Read-Only】打开文件成为只读文件
    【[E]dit anyway】正常打开你要编辑的那个文件，不会加载缓存内容；但是多个用户可能会互相改变对方编辑结果；
    【[R]cover】加载缓存内容，就是救回之前未保存的工作；当文件找回并退出vim之后，需要手动删除swap缓存文件；
    【[D]elete it】删除该缓存（当你确认无用后）；
    【[Q]uit】退出vim，不进行任何操作；
    【[A]bort】忽略编辑操作，与quit类似；
    
2.vim额外功能讲解
  由于/etc/services是系统规划的配置文件，vim会进行语法校验，编辑界面内部为深蓝色，且深蓝色部分是以注释符号（#）为开头；
  界面最下面一行，左边显示文件属性，文件有多少行，文件有多少字符；
  界面右下方显示光标所在行，字符所在位置以及浏览界面占整个文件的百分比；
  
3.可视区块
        v         |  字符选择，将光标经过的地方反白
  -------------------------------------------------------
        V         |  行选择，将光标经过的行反白
  -------------------------------------------------------
   [ctrl] + v     |  可视区块，可以用矩形的方式选择数据
  -------------------------------------------------------
        y         |  将反白的地方复制起来
  -------------------------------------------------------
        d         |  将反白的地方删除
  -------------------------------------------------------
        p         |  讲刚刚复制的区块，在光标所在处粘贴
  -------------------------------------------------------
  
4.变量的设置规则
  变量名与变量内容通过[=]来连接，[=]两边不能接空格；
    如：myname=Lzy；echo $myname，可输出Lzy
  变量名只能为字母与数字，但是变量名开头不能为数字；
  双引号内的特殊字符如$等，可保持原本的内容特性；
    如：myname=Lzy its me，设置将会报错
        myname="Lzy its me"，可以成功设置变量，且空格有效
  可使用转义字符[\]将特殊符号（enter,$,\,space,'等）变成一般字符；
  在一串命令执行中，需要借用额外命令所提供的信息时，可以使用反单引号[`命令`]或者[$(命令)];
    如:version=$(uname -r)；echo $version，可输出Linux内核版本信息
  如果该变量需要被递归调用，可使用["$变量名"]或[${变量名}];
    如：PATH=$PATH:/home/bin；echo $PATH，可在原变量的基础上增加':/home/bin'
  通常大写的变量名为系统默认变量。自行设置变量可以使用小写字符；
  如果该变量需要在其他子进程执行，需要以export来使变量成为环境变量
    如：# myname=Lzy      设置变变量myname
        # export name     将该变量myname设置为环境变量
        # bash            进入子进程
        # echo $myname    执行变量，可以正常输出结果
    【知识点】
    # bash，可以进入Linux所谓的子进程
  
5.取消变量的方法
  unset [变量名]
    如：unset myname，则变量myname被取消
  
6.环境变量
    功能：根目录（主文件夹）的变换、提示字符的显示、执行文件查找路径等；
    查看shell下所有环境变量
      env，export
      env是environment（环境）的简写，现注释列出的环境变量含义
        * HOME，表示用户的根目录。cd ~可切换至根目录，有很多程序可能会使用这个变量的值；
        * SHELL，当前这个环境使用的shell是哪个程序，Linux默认使用/bin/bash；
        * HISTSIZE，历史命令可记录的条数；
        * MAIL，当我们使用mail这个命令时，系统会去读取邮箱文件（mailbox）；
        * PATH，执行文件查找的路径，目录与目录之间用（:）隔开；
                由于文件的查找是按照PATH变量内目录的顺序来查询的，所以目录顺序也很重要；
        * LANG，语系数据【语系内容为重点】
        * RANDOM，随机数的变量。随机数生成器/dev/random这个文件。在bash环境下，这个RANDOM变量的内容，介于0~32767之间
                  所以只要执行echo $RANDOM，系统就会随机选出介于0~32767的值；
      set，观察所有变量（含环境变量与用户自定义变量）
        在Linux默认的情况中，使用[大写字母]来设置的变量，一般为系统内定的变量
        【重要变量解析】
          PS1：命令提示字符
            \d：可显示[星期 月 日]的日期格式，如【Mon Feb 2】；
            \H：完整的主机名；
            \h：仅取主机名在第一个小数点之前的名字；
            \t：显示时间，为24小时格式【HH：MM：SS】；
            \T：显示时间，为12小时格式【HH：MM：SS】；
            \A：显示时间，为24小时格式【HH：MM】；
            \@：显示时间，为12小时格式【am/pm】；
            \u：当前用户的账号名称；
            \v：BASH的版本信息；
            \w：完整的工作目录名称，由根目录写起的目录名称，但是根目录会以~替换；
            \W：利用bashname函数取得的工作目录名称，仅列出最后一目录名；
            \#：执行的第几个命令；
            \$：提示字符，如果是root，提示字符为#，否则就是$；
          $：（关于本shell的PID）表示当前这个shell的进程号，即所谓得PID（Progress ID）
            echo $$，结果就是当前shell的PID号码
          ?：（关于上个执行命令的返回值）
            当我们执行某些命令时，这些命令都会返回一个执行后的代码；
            一般来说，如果成功执行该命令，则会返回一个0值；如果执行过程中发生错误，就会返回一个非0的错误代码
          OSTYPE、HOSTTYPE、MACHTYPE（主机硬件与内核的等级）
      export：自定义变量转换为环境变量
        子进程：在原本的bash下面执行另外一个bash，那么第二个bash就是子进程；
        父进程：原bash就是父进程，当子进程执行的时候，父进程会进入暂停（sleep）状态；
          【关键知识点】
          子进程仅仅会继承父进程的环境变量，不会继承父进程的自定义变量；
          使用export将自定义变量转换为环境变量，子进程即可正常调用变量；
          
7.变量的有效范围
  【环境变量=全局变量
    自定义变量=局部变量】
   环境变量的数据被子进程调用的原因/
     当启动一个shell，操作系统会分配一内存区域给shell使用，此内存的变量可让子进程调用；
     若在父进程利用export，可以让自定义变量的内容写到上述的内存区域中；
     当加载另一个shell（即启动子进程，而离开原本父进程），子shell可将父shell的环境变量所在内存区域导入到自己的环境变量区块中
     
8.变量键盘读取、数组与声明
  *命令：[read],读取来自键盘的输入变量；用于shell脚本编写中，与用户交互
    # read [-pt] variable
      -p：后面可接提示字符
      -t：后面可接等待的秒数
    示例：[root@Lzy ~]# read -p "Please input your variable:" -t 30 name
  *命令：[declare,typeset]，声明变量的类型
    # declare [-aixr] variable
      -a：将后面的变量类型定义为数组（array）类型
      -i：将后面的变量类型定义为整数（integer）类型
      -x：用法与export一样，将后面的variable设置成环境变量
      -r：将变量设置成readonly类型，该变量不可被更改内容，也不可能unset
      【默认情况下，bash对变量有几个基本的定义：
      <1>变量类型默认为字符串；
      <2>bash环境下的数值运算，默认最多能到达整数形态，即1/3的结果为0】
      
9.ulimit，通过bash限制用户的某些资源（如：可开启的文件数量、可使用的CPU时间、可使用的内存总量等）
  # ulimit [-SHacdfltu] [配额]
  -H：hard limit
    
        
        
        
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  

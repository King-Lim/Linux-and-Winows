1.关于vim的报错
# vim /tmp/vitest/man_db.conf
  E325：ATTENTION
  ......
  [O]pen Read-Only,[E]dit anyway,[R]cover,[D]elete it,[Q]uit,[A]bort
    【[O]pen Read-Only】打开文件成为只读文件
    【[E]dit anyway】正常打开你要编辑的那个文件，不会加载缓存内容；但是多个用户可能会互相改变对方编辑结果；
    【[R]cover】加载缓存内容，就是救回之前未保存的工作；当文件找回并退出vim之后，需要手动删除swap缓存文件；
    【[D]elete it】删除该缓存（当你确认无用后）；
    【[Q]uit】退出vim，不进行任何操作；
    【[A]bort】忽略编辑操作，与quit类似；
    
2.vim额外功能讲解
  由于/etc/services是系统规划的配置文件，vim会进行语法校验，编辑界面内部为深蓝色，且深蓝色部分是以注释符号（#）为开头；
  界面最下面一行，左边显示文件属性，文件有多少行，文件有多少字符；
  界面右下方显示光标所在行，字符所在位置以及浏览界面占整个文件的百分比；
  
3.可视区块
        v         |  字符选择，将光标经过的地方反白
  -------------------------------------------------------
        V         |  行选择，将光标经过的行反白
  -------------------------------------------------------
   [ctrl] + v     |  可视区块，可以用矩形的方式选择数据
  -------------------------------------------------------
        y         |  将反白的地方复制起来
  -------------------------------------------------------
        d         |  将反白的地方删除
  -------------------------------------------------------
        p         |  讲刚刚复制的区块，在光标所在处粘贴
  -------------------------------------------------------
  
4.变量的设置规则
  变量名与变量内容通过[=]来连接，[=]两边不能接空格；
    如：myname=Lzy；echo $myname，可输出Lzy
  变量名只能为字母与数字，但是变量名开头不能为数字；
  可使用转义字符[\]将特殊符号（enter,$,\,space,'等）变成一般字符；
  在一串命令执行中，需要借用额外命令所提供的信息时，可以使用反单引号[`命令`]或者[$(命令)];
    如:version=$(uname -r)；echo $version，可输出Linux内核版本信息
  如果该变量需要被递归调用，可使用["$变量名"]或[${变量名}];
    如：PATH=$PATH:/home/bin；echo $PATH，可在原变量的基础上增加':/home/bin'
  通常大写的变量名为系统默认变量。自行设置变量可以使用小写字符；
  如果该变量需要在其他子进程执行，需要以export来使变量成为环境变量
    如：# myname=Lzy      设置变变量myname
        # export name     将该变量myname设置为环境变量
        # bash            进入子进程
        # echo $myname    执行变量，可以正常输出结果
    【知识点】
    # bash，可以进入Linux所谓的子进程
  
5.取消变量的方法
  unset [变量名]
    如：unset myname，则变量myname被取消
  
6.
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  

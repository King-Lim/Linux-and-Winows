1.Linux硬链接与软链接
    文件在Linux上被分成两个部分：用户数据（user data）与元数据（metadata）
    用户数据：文件数据块（data block），数据块是记录文件真实内容的地方；
    元数据：指的是文件的附加属性，如文件名、文件大小、创建时间、owner、文件所在的inode信息等；
    【重点：在Linux中，元数据的inode号（inode号即索引节点号）才是文件的唯一标识而非文件名】
        可以使用stat，ls -i查看inode号
        @硬链接：一个inode号对应多个文件（同一个文件使用了多个别名）
        ln命令为现有文件创建新的硬链接
            硬链接的特性：
            *文件有相同的inode及data block；
            *只能对已存在的文件进行创建；
            *不能交叉文件系统进行硬链接的创建；
            *不能对目录进行创建，只可对文件进行创建；
            *删除一个硬链接文件并不影响其他有相同inode号的文件
        @软链接：文件用户数据块中存放内容是另一文件的路径名的指向，则该文件就是软链接
                软链接就是一个普通文件，只是数据块内容特殊；软链接有自己的inode号以及用户数据
        ln -s命令创建软链接
            软链接的特性：
            *软链接有自己的文件属性及权限等；
            *可对不存在的文件或目录创建软链接；
            *软链接可交叉文件系统；
            *软链接可对文件或目录创建；
            *创建软链接时，链接计数i_nlink不会增加；
            *删除软链接并不影响被指向的文件，但若指向的原文件被删除，则相关软链接称为死链接或悬挂的软链接
                （dangling link，若指向路径文件被重新创建，死链接可恢复为正常的软链接）

2.文件系统
        文件系统通常会将这两部分的数据分别存放在不同的区块；
        权限与属性等放置到inode中；
        实际数据放置到数据区块中；
        还有一个超级区块（superblock）会记录整个文件系统的整体信息，包括inode与数据区块的总量、使用量、剩余量等；
    @数据区块（data block）
        数据区块是用来放置文件数据的地方，在ext2文件系统中所支持的区块大小有1K、2K、4K三种；
        ext2文件系统的限制：
            *原则上，区块的大小与数量在格式化完就不能够再修改（除非重新格式化）；
            *每个区块内最多只能放置一个文件的数据；
            *如果文件大于区块的大小，则一个文件会占用多个区块的数量；
            *如果文件小于区块的大小，则该区块的剩余容量就不能够再被使用了；
    @inode table（inode表）
        inode记录的内容：
            *该文件的读写属性（read、write、execute）；
            *该文件的拥有者与用户组（owner、group）；
            *该文件的大小；
            *该文件建立或状态改变的时间（ctime）；
            *最近一次的读取时间（atime）；
            *最近修改的时间（mtime）；
            *定义文件特性的标识（flag），如SetUID；
            *该文件数据内容的指向（pointer）；
        inode的其他特点：
            *每个inode大小均固定为128B（新的ext4与xfs可设置到256B）；
            *每个文件仅会占用一个inode；
            *文件系统能够建立的文件数量与inode的数量有关；
            *系统读取文件时需要先找到inode，并分析inode所记录的权限与用户是否符合，如果符合才会读取区块的内容；
        inode记录区块号码的区域定义为12个直接、1个间接、1个双间接、1个三间接记录区；
        所谓的间接，即再拿一个区块来当做记录区块号码的记录区，如果文件太大，就会使用间接的区块来记录编号；
    @superblock（超级区块）
        超级区块是记录整个文件系统相关信息的地方，记录的信息包括：
            *数据区块与inode的总量；
            *未使用与已使用的inode与数据区块数量；
            *数据区块与inode的大小（block为1、2、4K，inode为128B或256B）；
            *文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘（fsck）的时间等文件系统相关信息；
            *一个有效位数值，如果文件系统已被挂载，则有效位为0；若未被挂载，则有效位为1；
        dumpe2fs：查询ext系列超级区块的信息
            dumpe2fs [-bh] 设备文件名    （设备文件名可通过blkid获取）

3.linux系统中的文件系统与内存之间的关系
    *系统会将常用的文件数据放置到内存的缓冲区，以加速文件系统的读写操作；
    *因此，Linux的物理内存最后都会被用光；
    *可以手动使用sync来强制内存中设置为Dirty的文件回写到磁盘中；
    *正常关机时，关机命令会主动调用sync来将内存的数据回写到磁盘中；
    *若不正常关机，再次启动后可能会花很多时间来进行磁盘校验，甚至导致文件系统的损坏；

4.whereis、which、locate、find搜索文件的区别
    *which：常用于查找可执行的命令。只能查找可执行文件，该命令基本只在$PATH路径中搜索，查找范围最小，查找速度最快
            默认只返回第一个匹配的文件路径；
    *whereis：不止可以查找命令，其他文件类型都可以（man、源文件和man文件，实测可查大多数文件）
            在$PATH路径基础上增加了一些系统目录的查找。通过-b选项，限制仅搜索二进制文件。
    *locate：超快速查找任意文件。从linux内置的索引数据库查找文件的路径，索引速度超快；
            刚刚新建的文件需要一段时间才能加入索引数据库，可以通过updatedb强制更新索引；
            该命令会返回大量匹配项，可以使用-r选项通过正则表达式来精确匹配；
    *find：直接搜索整个文件目录，默认从根目录开始搜索，速度慢；          

5.scp与rsync的区别与用法
    @scp语法
        scp <option> source_file_name remote_username@remote_ip:absolute_path
      例：scp -r /tmp/text.txt root@15.0.17.107:/home/new_text.txt
        -P：指定远程主机的ssh端口；
        -p：保留文件修改和访问时间；
        -q：抑制进度表和非错误消息；
        -C：在数据发送到目标主机前压缩数据；
        -r：递归复制目录；
        -v：详细模式，打印有关进度的消息
        【注意：为确保复制成功，此用户对源文件具有读取权限，在目标系统上具有写入权限】        
    @rsync是Linux系统下的数据镜像备份工具（官方网站：https://rsync.samba.org/）
        rsync监听端口：873
        语法：rsync <option> source_file absolute_file
        -a：--archive（存档）归档模式，表示以递归的方式传输文件，并且保持文件属性；
        -v：显示rsync过程中的详细信息；
        -r：对子目录以递归模式处理；
        -l：拷贝链接文件；
        -p：保持文件原有权限；
        -z：压缩传输；
        -P：显示传输进度；        
    @区别：
    *scp通过安全的ssh连接将文件从本地机器复制到远程机器，而rsync允许同步远程文件夹；
    *scp读取源文件并将其写入目标，是在本地或通过网络执行线性复制。
     rsync也是在本地通过网络复制文件，但其通过使用特殊的增量传输算法和一些优化来使操作更快；
    *scp总是安全的，而rsync必须通过ssh传输才安全；
    *如果传输大文件时，传输完成前连接，rsync会从中断处继续传输，而scp不会；

6.curl命令详解
    语法：curl [-option] url
        常见参数：
        -A/-user-agent：设置用户代理发送给服务器
        -b/-cookie<neme=string/file>：cookie字符串或文件读取位置
        -c/-cookie-jar：操作结束后把cookie写入到这个文件中
        -C/-ontinue-at：断点续传
        -D/-dump-header：把header信息写入到该文件中
        -e/-referer：来源网址
        -f/-fail：连接失败时不显示http错误
        -o/-output：把输出写到该文件中
        -O/-remote-name：把输出写到该文件中，保留远程文件的文件名
        -r/-range：检索来自HTTP/1.1或FTP服务器字节范围
        -s/-slient：不输出任何东西
        -T/-upload-file：上传文件
        -u/-user<user[password]>：设置服务器用户名和密码
        -w/-write-out
